// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(auto())  @map("_id") @db.ObjectId
  email String @unique
  username String @unique
  bio String?
  image String?
  password String
  comments Comment[]
  articles Article[]
  followers User[] @relation("authorFollowers", fields: [followersIds], references: [id])
  followersIds String[] @db.ObjectId
  following  User[] @relation("authorFollowers", fields: [followingIds], references: [id])
  followingIds String[] @db.ObjectId
  articlesLiked Article[] @relation("likedArticles", fields: [articlesLikedIds], references: [id])
  articlesLikedIds String[] @db.ObjectId
  membership Membership?
}

model Article {
  id String @id @default(auto())  @map("_id") @db.ObjectId
  title String
  slug String @unique
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body String
  tagList String[] @default([])
  hasPaywall Boolean @default(false)
  viewCount Int @default(0)
  favouritedUsers User[] @relation( "likedArticles", fields: [favouritedUserIds], references: [id])
  favouritedUserIds String[] @db.ObjectId
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  comments Comment[]
}

model Comment {
  id String @id @default(auto())  @map("_id") @db.ObjectId
  body String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String
}

model Membership {
  id String @id @default(auto())  @map("_id") @db.ObjectId
  tier String @default("Free")
  renewalDate DateTime @default(now())
  autoRenew Boolean @default(false)
  totalRevenue Float @default(0)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

